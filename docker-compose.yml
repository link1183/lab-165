services:
  # MongoDB standalone server
  mongodb:
    image: mongo:5.0
    container_name: mongodb-lab165
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./data:/docker-entrypoint-initdb.d:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=AdminPassword123!
      - MONGO_INITDB_DATABASE=my_data
    networks:
      - lab165-network

  # Flask application (standalone mode)
  app:
    build: .
    container_name: flask-app-lab165
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    environment:
      - MONGO_URI=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=my_data
      - MONGO_COLLECTION=open_data
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=AdminPassword123!
      - MONGO_AUTH_DB=admin
    networks:
      - lab165-network
    volumes:
      - ./templates:/app/templates:ro
      - ./static:/app/static:ro

  # MongoDB Admin UI
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express-lab165
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=AdminPassword123!
      - ME_CONFIG_MONGODB_URL=mongodb://admin:AdminPassword123!@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongodb
    networks:
      - lab165-network
    profiles:
      - tools

  # MongoDB Replica Set Services
  mongo-rs1:
    image: mongo:5.0
    container_name: mongo-rs1-lab165
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27018:27017"
    volumes:
      - mongo-rs1-data:/data/db
    networks:
      - lab165-network
    profiles:
      - replica

  mongo-rs2:
    image: mongo:5.0
    container_name: mongo-rs2-lab165
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27019:27017"
    volumes:
      - mongo-rs2-data:/data/db
    networks:
      - lab165-network
    profiles:
      - replica

  mongo-rs3:
    image: mongo:5.0
    container_name: mongo-rs3-lab165
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27020:27017"
    volumes:
      - mongo-rs3-data:/data/db
    networks:
      - lab165-network
    profiles:
      - replica

  # Replica Set Initializer
  mongo-rs-init:
    image: mongo:5.0
    container_name: mongo-rs-init-lab165
    restart: "no"
    depends_on:
      - mongo-rs1
      - mongo-rs2
      - mongo-rs3
    networks:
      - lab165-network
    entrypoint: >
      bash -c "
        echo 'Waiting for MongoDB nodes to start...'
        sleep 10
        echo 'Initializing replica set...'
        mongosh --host mongo-rs1-lab165:27017 --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [
              {_id: 0, host: \"mongo-rs1-lab165:27017\", priority: 2},
              {_id: 1, host: \"mongo-rs2-lab165:27017\", priority: 1},
              {_id: 2, host: \"mongo-rs3-lab165:27017\", priority: 1}
            ]
          })
        '
        sleep 5
        echo 'Creating admin user...'
        mongosh --host mongo-rs1-lab165:27017 --eval '
          db = db.getSiblingDB(\"admin\");
          db.createUser({
            user: \"admin\",
            pwd: \"AdminPassword123!\",
            roles: [{role: \"root\", db: \"admin\"}]
          })
        '
        echo 'Importing data to replica set...'
        mongosh --host mongo-rs1-lab165:27017 --eval '
          db = db.getSiblingDB(\"my_data\");
          db.createCollection(\"open_data\");
        '
        echo 'Replica set initialization completed!'
      "
    profiles:
      - replica

  # Flask application for replica set - Fixed with Primary read preference
  app-replica:
    build: .
    container_name: flask-app-replica-lab165
    restart: unless-stopped
    ports:
      - "5001:5000"
    depends_on:
      - mongo-rs-init
    environment:
      - REPLICA_MEMBERS=mongo-rs1-lab165:27017,mongo-rs2-lab165:27017,mongo-rs3-lab165:27017
      - REPLICA_SET_NAME=rs0
      - MONGO_DB=my_data
      - MONGO_COLLECTION=open_data
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=AdminPassword123!
      - MONGO_AUTH_DB=admin
    networks:
      - lab165-network
    volumes:
      - ./templates:/app/templates:ro
      - ./static:/app/static:ro
      - ./app-replica.py:/app/app-replica.py:ro
    command: >
      bash -c "
        echo 'Waiting for replica set initialization...'
        sleep 30
        echo 'Starting Flask app with replica set...'
        python app-replica.py
      "
    profiles:
      - replica
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  lab165-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  mongo-rs1-data:
    driver: local
  mongo-rs2-data:
    driver: local
  mongo-rs3-data:
    driver: local
