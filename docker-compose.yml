services:
  # MongoDB standalone server
  mongodb:
    image: mongo:8.0
    container_name: mongodb-lab165
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - ./data:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=AdminPassword123!
      - MONGO_INITDB_DATABASE=my_data
    networks:
      - lab165-network

  # Flask application
  app:
    build: .
    container_name: flask-app-lab165
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    environment:
      - MONGO_URI=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=my_data
      - MONGO_COLLECTION=open_data
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=AdminPassword123!
      - MONGO_AUTH_DB=admin
    networks:
      - lab165-network
    volumes:
      - ./templates:/app/templates
      - ./static:/app/static

  # MongoDB Replica Set
  mongo-rs1:
    image: mongo:8.0
    container_name: mongo-rs1-lab165
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27018:27017"
    networks:
      - lab165-network
    profiles:
      - replica

  mongo-rs2:
    image: mongo:8.0
    container_name: mongo-rs2-lab165
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27019:27017"
    networks:
      - lab165-network
    profiles:
      - replica

  mongo-rs3:
    image: mongo:8.0
    container_name: mongo-rs3-lab165
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27020:27017"
    networks:
      - lab165-network
    profiles:
      - replica

  # Replica set initializer
  mongo-rs-init:
    image: mongo:8.0
    container_name: mongo-rs-init-lab165
    restart: "no"
    depends_on:
      - mongo-rs1
      - mongo-rs2
      - mongo-rs3
    networks:
      - lab165-network
    volumes:
      - ./data:/data
    command: >
      bash -c "
        echo 'Waiting for MongoDB nodes to start...'
        sleep 15
        mongosh --host mongo-rs1-lab165:27017 --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [
              {_id: 0, host: \"mongo-rs1-lab165:27017\", priority: 2},
              {_id: 1, host: \"mongo-rs2-lab165:27017\", priority: 1},
              {_id: 2, host: \"mongo-rs3-lab165:27017\", priority: 1}
            ]
          });

          while (!rs.isMaster().ismaster) {
            print(\"Waiting for primary election...\");
            sleep(1000);
          }

          db = db.getSiblingDB(\"admin\");
          db.createUser({
            user: \"admin\",
            pwd: \"AdminPassword123!\",
            roles: [{role: \"root\", db: \"admin\"}]
          });

          db = db.getSiblingDB(\"my_data\");
          db.createCollection(\"open_data\");
          db.createCollection(\"my_team\");

          db.my_team.insertMany([
            {
              name: \"Team Member 1\",
              role: \"Database Administrator\",
              email: \"admin@lab165.local\",
              specialization: \"MongoDB Management\",
              created_at: new Date()
            },
            {
              name: \"Team Member 2\",
              role: \"Application Developer\",
              email: \"dev@lab165.local\",
              specialization: \"Flask Applications\",
              created_at: new Date()
            },
            {
              name: \"Team Member 3\",
              role: \"Data Analyst\",
              email: \"analyst@lab165.local\",
              specialization: \"Data Visualization\",
              created_at: new Date()
            }
          ]);
        '

        echo 'Replica set initialization completed!'

        # Now import data from CSV
        echo 'Importing CSV data...'
        mongoimport --host mongo-rs1-lab165:27017 --db my_data --collection open_data --type csv --headerline --file /data/path_of_exile_ladder.csv
      "
    profiles:
      - replica

  # Flask application for replica set
  app-replica:
    build: .
    container_name: flask-app-replica-lab165
    restart: unless-stopped
    ports:
      - "5001:5000"
    depends_on:
      - mongo-rs-init
    environment:
      - REPLICA_MEMBERS=mongo-rs1-lab165:27017,mongo-rs2-lab165:27017,mongo-rs3-lab165:27017
      - REPLICA_SET_NAME=rs0
      - MONGO_DB=my_data
      - MONGO_COLLECTION=open_data
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=AdminPassword123!
      - MONGO_AUTH_DB=admin
    networks:
      - lab165-network
    volumes:
      - ./templates:/app/templates
      - ./static:/app/static
    command: >
      bash -c "
        echo 'Waiting for replica set initialization (60 seconds)...'
        sleep 60
        echo 'Starting Flask app with replica set...'
        python app-replica.py
      "
    profiles:
      - replica

networks:
  lab165-network:
    driver: bridge
